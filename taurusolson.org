#+TITLE: Taurus Olson's Emacs configuration file
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
#+DATE: 2016-09-24

* Sensible defaults

  Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/resources/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC

* Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Taurus Olson"
        user-mail-address "taurusolson@gmail.com")
#+END_SRC

* Global behavior
  Don't ask for confirmation when exiting Emacs.

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs nil)
#+END_SRC

** =exec-path-from-shell=                                           :PACKAGE:

  Use the $PATH in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (exec-path-from-shell-initialize))
#+END_SRC

* Useful functions

#+BEGIN_SRC emacs-lisp
  (def-find-file emacs-config-file)

  (defun taurus/load-appropriate-theme (light-theme dark-theme)
    "Load the light theme in the morning and the dark theme at night"
    (interactive)
    (if (< (string-to-int (format-time-string "%H")) 19)
        (load-theme light-theme :no-confirm)
      (load-theme dark-theme :no-confirm)))

  (defun taurus/update-current-date ()
    "Updates the current date in an org file"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (search-forward "#+DATE:" nil t)
      (kill-line)
      (insert (format " %s" (format-time-string "%Y-%m-%d")))))
#+END_SRC

* Evil
** Global config

#+BEGIN_SRC emacs-lisp
  (use-package evil
   :config (evil-mode 1)

   :bind (:map evil-normal-state-map
               ;; Window movements
               ("C-k" . evil-window-up)
               ("C-j" . evil-window-down)
               ("C-l" . evil-window-right)
               ("C-h" . evil-window-left)
               ;; Emacs style
               ("C-a" . evil-beginning-of-line)
               ("C-e" . evil-end-of-line)
               ;; Save
               ("C-SPC" . save-buffer)
               ;; Describe functions
               ("? k" . describe-key)
               ("? v" . describe-variable)
               ("? f" . describe-function)
               ("? m" . describe-mode)
               ("? p" . describe-package)
          :map evil-insert-state-map
               ("C-a" . beginning-of-line)
               ("C-e" . end-of-line)))
#+END_SRC


** =evil-escape=

#+BEGIN_SRC emacs-lisp
(use-package evil-escape
    :diminish
    (evil-escape-mode)
    :config
    (evil-escape-mode)
    (setq-default evil-escape-key-sequence "kj"
                  evil-escape-delay 0.2)
    (setq evil-escape-unordered-key-sequence t))
#+END_SRC

** =evil-surround=                                                  :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1)
  )
#+END_SRC

** =evil-search-highlight-persist=                                  :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package evil-search-highlight-persist
    :config
    (global-evil-search-highlight-persist t)
  )
#+END_SRC

** =evil-leader=                                                    :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :init
    (global-evil-leader-mode)
    :config
    (evil-leader/set-leader ",")
    (evil-leader/set-key "e" 'find-emacs-config-file)
    (evil-leader/set-key "b" 'ibuffer)
    (evil-leader/set-key "d" 'dired-jump))
#+END_SRC

** =which-key=

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode 1))
#+END_SRC

* Settings for Mac OS X

On Mac OS X, we set the =cmd= key (mac-command-modifier) to =meta= and =alt=
(mac-option-modifier) to nil.

#+BEGIN_SRC emacs-lisp
  (setq ns-command-modifier 'meta
        select-enable-clipboard t)

  (setq mac-option-modifier nil
        mac-command-modifier 'meta)

  ;avoid hiding with M-h
  (setq mac-pass-command-to-system nil)
#+END_SRC

* Org
** Agenda view
   The agenda shows the tasks for the current week and the next one.
   I set the schedule and deadline date of a task but I don't want to see 2 times this
   information in my agenda if the schedule date is the same as the deadline date.
   (see =org-agenda-skip-deadline-prewarning-if-scheduled= and
   =org-agenda-skip-scheduled-if-deadline-is-shown=)
   Moreover the todo list, doesn't show the tasks that are not schedule and have
   no deadline date.
   This allows me to set these dates in function of my agenda.
   I use the view grouping both the agenda and the todo list (=C-a n=)

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-skip-deadline-prewarning-if-scheduled t
       org-agenda-skip-scheduled-if-deadline-is-shown t
       org-agenda-todo-ignore-deadlines t
       org-agenda-todo-ignore-scheduled t
       org-agenda-window-setup 'current-window
       org-deadline-warning-days 7
       org-agenda-show-log t
       org-agenda-span 'fortnight)
#+END_SRC

** Custom agenda views

   - d: Tasks for today

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("d" "Daily Action List"
           ((agenda "" ((org-agenda-ndays 1)
                        (org-agenda-sorting-strategy '((agenda time-up priority-down tag-up)))
                        (org-deadline-warning-days 0)))))))
#+END_SRC

** My org usage

   Show the tasks for today when opening Emacs

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook (lambda () (org-agenda nil "d")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Personal configuration
  (defconst org-directory "~/Dropbox/olson")
  (defconst olson-dir "~/Dropbox/olson")
  (defconst olson-index-file (expand-file-name "index.org" olson-dir))
  (defconst olson-diary-file (expand-file-name "diary.org" olson-dir))
  (defconst org-agenda-files (list olson-index-file))
  (setq org-archive-location "archives/%s_archive::")

  ;; Settings
  (setq org-todo-keywords
        '((sequence "TODO(t)" "ACTIVE(a)" "SOMEDAY(s)" "DEFERRED(f)" "|" "CANCELLED(x)" "DONE(d)")))

  ;; Define the find-file functions for index and diary
  (def-find-file olson-index-file)
  (def-find-file olson-diary-file)
#+END_SRC

   Don't ask before evaluating code blocks.
   Edit the code block in the same window.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil
        org-src-window-setup 'current-window)
#+END_SRC

** =org-capture= to quickly add new tasks.

#+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
        '(("t" "add new task in index" entry (file+headline olson-index-file "Tasks") "* TODO  %?\n")
          ("d" "add new day in diary" entry (file+headline olson-diary-file "Diary") "* %t %?\n")
  ))
#+END_SRC

** Babel
#+BEGIN_SRC emacs-lisp
  (require 'ob-clojure)
  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((python . t)
  ;;    (R . t)))
#+END_SRC

** =org-bullets= for fancier bullets.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
      :init
      (setq org-bullets-bullet-list
        '("◉" "◎" "○" "○" "○" "○"))
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      (setq org-hide-leading-stars t))
#+END_SRC

** Log the closed tasks and create logs in the =:LOGBOOK:= drawer with =C-c C-z=.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done t
        org-log-into-drawer t)
#+END_SRC

** Export to Markdown.

#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(require 'ox-md nil t))
#+END_SRC

** Use syntax highlighting and indentation in source blocks while editing.

   When editing a code snippet, use the current window rather than popping open a
   new one (which shows the same information).

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-co" 'org-capture)
  (global-set-key (kbd "C-c C-d") 'org-deadline)
  (define-key mode-specific-map [?a] 'org-agenda)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-cL" 'org-insert-link-global)
  ;; (global-set-key (kbd "S-<return>") 'eval-last-sexp)
#+END_SRC

* Deft

#+BEGIN_SRC emacs-lisp
  (use-package deft
    :config
    (setq deft-extension "org"
          deft-default-extension "org"
          deft-directory "~/Dropbox/olson/notes"
          deft-auto-save-interval 0
          deft-text-mode 'org-mode))
#+END_SRC

** Use filename as title

#+BEGIN_SRC emacs-lisp
  (setq deft-use-filename-as-title nil)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules '((noslash . "_")
                                 (nospace . "_")
                                 (case-fn . downcase)))
  (setq deft-org-mode-title-prefix t)

  ;;advise deft to save window config
  (defun bjm-deft-save-windows (orig-fun &rest args)
    (setq bjm-pre-deft-window-config (current-window-configuration))
    (apply orig-fun args)
    )

  (advice-add 'deft :around #'bjm-deft-save-windows)

  ;function to quit a deft edit cleanly back to pre deft window
  (defun bjm-quit-deft ()
    "Save buffer, kill buffer, kill deft buffer, and restore window config to the way it was before deft was invoked"
    (interactive)
    (save-buffer)
    (kill-this-buffer)
    (switch-to-buffer "*Deft*")
    (kill-this-buffer)
    (when (window-configuration-p bjm-pre-deft-window-config)
      (set-window-configuration bjm-pre-deft-window-config)
      )
    )
#+END_SRC

** =deft= keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c q") 'bjm-quit-deft)
  (global-set-key (kbd "C-x n") 'deft)
  (global-set-key (kbd "C-x N") 'deft-new-file-named)
  (global-set-key (kbd "C-x C-g") 'deft-find-file)
#+END_SRC

* Magit

  I use =magit= to work with Git.
  All the magit modes are set to normal Vim mode

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init (use-package evil :config (evil-mode 1))
    :config
    (define-key evil-normal-state-map (kbd "gs") 'magit-status)
    (define-key evil-normal-state-map (kbd "gv") 'magit-log-all)
    )
#+END_SRC

* Edition
** Always indent with spaces

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** =company=                                                        :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config (company-mode)
    )
#+END_SRC

** =markdown-mode=

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** =paredit=                                                        :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (defun paredit-kill-then-insert ()
    (interactive)
    (paredit-kill)
    (evil-insert 1))

  (use-package paredit
   :init (use-package evil :config (evil-mode 1))
   :diminish paredit-mode
   :config
   (paredit-mode)
   (define-key evil-normal-state-map (kbd "D") 'paredit-kill)
   (define-key evil-normal-state-map (kbd "C") 'paredit-kill-then-insert)
  )
#+END_SRC

** =undo-tree=

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode)
#+END_SRC

** =eldoc-mode=


#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC

** =ess=                                                            :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :commands R
    :config
    (progn
      (setq inferior-R-program-name "/usr/bin/R")
      (add-to-list 'auto-mode-alist '("\\.R$" . R-mode))
      (setq comint-input-ring-size 1000)
      ;; Eldoc
      (setq ess-use-eldoc 'script-only)
      (setq ess-eldoc-show-on-symbol t)
      (setq ess-eldoc-abbreviation-style t)
      ;; Indentation
      (setq ess-indent-level 4)
      (setq ess-arg-function-offset 4)
      (setq ess-else-offset 4)
      ;; R repl
      (add-hook 'inferior-ess-mode-hook
             '(lambda nil
                (define-key inferior-ess-mode-map [up]
                  'comint-previous-matching-input-from-input)
                (define-key inferior-ess-mode-map [down]
                  'comint-next-matching-input-from-input)
                (define-key inferior-ess-mode-map [\C-x \t]
                  'comint-dynamic-complete-filename)))))

#+END_SRC
** Python
*** =virtualenvwrapper=                                             :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :init (setq venv-location "~/.virtualenvs")
  )
#+END_SRC
** Clojure

#+BEGIN_SRC emacs-lisp
  ;;(use-package clojure-mode)
  ;;(use-package cider
  ;;  :init (use-package evil-leader :config (global-evil-leader-mode))
  ;;  :config
  ;;  (add-hook clojure-mode-hook
  ;;            (lambda () (evil-leader/set-key "x" 'cider-eval-last-sexp))))
#+END_SRC

* UI
** No useless bars in the interface

#+BEGIN_SRC emacs-lisp
  (when window-system
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1))
#+END_SRC

** Fullscreen display on a Mac

#+BEGIN_SRC emacs-lisp
  (set-frame-parameter nil 'fullscreen 'fullboth)
#+END_SRC

** Fonts

   The standard =text-scale-= functions just resize the text in the current buffer;
   I'd generally like to resize the text in /every/ buffer, and I usually want to
   change the size of the modeline, too (this is especially helpful when
   presenting). These functions and bindings let me resize everything all together!

   Note that this overrides the default font-related keybindings from
   =sensible-defaults=.

#+BEGIN_SRC emacs-lisp
  (setq hrs/default-font "Fira Code")
  (setq hrs/default-font-size 20)
  (setq hrs/current-font-size hrs/default-font-size)
  (setq hrs/font-change-increment 1.1)

  (defun hrs/set-font-size ()
    "Set the font to `hrs/default-font' at `hrs/current-font-size'."
    (set-frame-font
     (concat hrs/default-font "-" (number-to-string hrs/current-font-size))))

  (defun hrs/reset-font-size ()
    "Change font size back to `hrs/default-font-size'."
    (interactive)
    (setq hrs/current-font-size hrs/default-font-size)
    (hrs/set-font-size))

  (defun hrs/increase-font-size ()
    "Increase current font size by a factor of `hrs/font-change-increment'."
    (interactive)
    (setq hrs/current-font-size
          (ceiling (* hrs/current-font-size hrs/font-change-increment)))
    (hrs/set-font-size))

  (defun hrs/decrease-font-size ()
    "Decrease current font size by a factor of `hrs/font-change-increment', down to a minimum size of 1."
    (interactive)
    (setq hrs/current-font-size
          (max 1
               (floor (/ hrs/current-font-size hrs/font-change-increment))))
    (hrs/set-font-size))

  (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
  (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
  (define-key global-map (kbd "C--") 'hrs/decrease-font-size)
  (hrs/set-font-size)
#+END_SRC

** No blinking cursor but show column number

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
  (column-number-mode 1)
#+END_SRC

** =rainbow-delimiters=                                             :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC

** =linum-relative=                                                 :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :config
    (linum-relative-mode 1))
#+END_SRC

** =golden-ratio=                                                   :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :disabled t
    :diminish golden-ratio-mode
    :init
    (golden-ratio-mode t)
    :config
    (add-to-list 'golden-ratio-extra-commands 'switch-window)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-up)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-down)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-right)
    (add-to-list 'golden-ratio-extra-commands 'evil-window-left)
    (setq golden-ratio-exclude-modes '("magit-auto-revert-mode"
                                       "eshell-mode" "dired-mode")))
#+END_SRC

* Navigation
** =smooth-scrolling-mode= 					    :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
   :init (setq smooth-scroll-margin 2)
   :config (smooth-scrolling-mode 1)
  )
#+END_SRC

** =ivy=                                                            :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish (ivy-mode . "")
    :bind
    (:map ivy-mode-map ("M-b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    ;; configure regexp engine.
    (setq ivy-re-builders-alist
          '((t . ivy--regex-fuzzy)))
      ;; number of result lines to display
      (setq ivy-height 10)
      ;; does not count candidates
      (setq ivy-count-format "")
      ;; no regexp by default
      (setq ivy-initial-inputs-alist nil))
#+END_SRC

** =counsel=

#+BEGIN_SRC emacs-lisp
    (use-package counsel
      :bind
      (:map counsel-mode-map ("M-r" . counsel-find-file))
      :config
      (counsel-mode 1))
#+END_SRC


** =swiper=

#+BEGIN_SRC emacs-lisp
  (use-package swiper)
#+END_SRC

** =ido=

#+BEGIN_SRC emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)
  ;; (setq ido-create-new-buffer 'always)
#+END_SRC

*** Keybindings

#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "M-b") 'ido-switch-buffer)
  ;; (global-set-key (kbd "M-f") 'ido-find-file)
#+END_SRC

** =ido-ubiquitous=                                                 :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package ido-ubiquitous
    :disabled t
    :config (ido-ubiquitous)
  )
#+END_SRC

** =ido-vertical=                                                   :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :disabled t
    :init (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    :config (ido-vertical-mode 1)
  )
#+END_SRC

** =flx-ido=                                                        :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :disabled t
    :config (flx-ido-mode 1))
#+END_SRC

** =smex=                                                           :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :disabled t
    :config (smex-initialize)
    :bind (("M-x" . smex)))
#+END_SRC

** =ibuffer=

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** =elisp-slime-nav=                                                :PACKAGE:

   Jump to source code (leader-t) and describe what there under the cursor (leader-h).

#+BEGIN_SRC emacs-lisp
    (use-package elisp-slime-nav
      :diminish elisp-slime-nav-mode
      :init (use-package evil-leader :config (global-evil-leader-mode))
      :config
      (evil-leader/set-key "t" 'elisp-slime-nav-find-elisp-thing-at-point)
      (evil-leader/set-key "h" 'elisp-slime-nav-describe-elisp-thing-at-point)
  )
#+END_SRC

** Lisps

   Make these modes
   get called every time emacs-lisp-mode is enabled:
   - =turn-on-eldoc-mode=
   - =paredit-mode=
   - =rainbow-delimiters=
   - =elisp-slime-nav-mode=

#+BEGIN_SRC emacs-lisp
  (defun configure-lispy-mode-hooks ()
      ;; (setq show-paren-style 'expression)
      (turn-on-eldoc-mode)
      (paredit-mode)
      (rainbow-delimiters-mode)
      (elisp-slime-nav-mode))

  (setq lispy-mode-hooks
      '(clojure-mode-hook
        emacs-lisp-mode-hook
        lisp-mode-hook
        scheme-mode-hook))

  (dolist (hook lispy-mode-hooks)
      (add-hook hook 'configure-lispy-mode-hooks))

  (evil-define-key 'normal emacs-lisp-mode-map (kbd "K") 'elisp-slime-nav-describe-elisp-thing-at-point)
#+END_SRC

* Keybindings

  I use =general.el= to manage my keybindings. It works perfectly with
  =which-key= and =evil=.

#+BEGIN_SRC emacs-lisp
  (use-package general :ensure t
    :config
    (general-define-key
     :states '(normal visual insert emacs)
     :prefix "SPC"
     :non-normal-prefix "C-SPC"

      ;; counsel
      "c" '(:ignore t :which-key "Counsel")
      "ca"   'counsel-ag

      ;; olson
      "o" '(:ignore t :which-key "Olson")
      "oi" 'find-olson-index-file
      "od" 'find-olson-diary-file

      ;; deft
      "d" '(:ignore t :which-key "Deft")
      "dq" 'bjm-quit-deft
      "do" 'deft
      "dn" 'deft-new-file-named
      "df" 'deft-find-file
  ))
#+END_SRC


** =key-seq=

#+BEGIN_SRC emacs-lisp
(use-package key-chord :ensure t
  :defer 1 ; do not load right at startup
  :config
  (setq key-chord-two-keys-delay 0.2)
  ;; need to use key-seq. otherwise key order does not matter. that's bad.
  ;; i want latency only on x.
  (use-package key-seq :ensure t
    :config
    (key-seq-define evil-insert-state-map "qf" #'ivy-switch-buffer)
    (key-seq-define evil-insert-state-map "qv" #'git-gutter:stage-hunk)
    (key-seq-define evil-insert-state-map "qc" #'avy-goto-word-1)
    (key-seq-define evil-insert-state-map "ql" #'avy-goto-line)
    (key-seq-define evil-insert-state-map "qs" #'save-buffer)
    (key-seq-define evil-insert-state-map "qp" #'hydra-projectile/body)
    (key-seq-define evil-insert-state-map "QV" #'magit-status)))
#+END_SRC

* Themes
** zenburn-theme                                                    :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
   :disabled t
   :init (load-theme 'zenburn t))
#+END_SRC

** solarized-theme                                                  :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :init
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    :config
    (taurus/load-appropriate-theme 'solarized-light 'solarized-dark))
#+END_SRC

** tomorrow                                                         :PACKAGE:

#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :disabled t
    :config
    (taurus/load-appropriate-theme 'sanityinc-tomorrow-day
                                   sanityinc-tomorrow-night))
#+END_SRC

** doom-theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :disabled t
    :init
    ;; brighter source buffers
    (add-hook 'find-file-hook 'doom-buffer-mode)
    ;; brighter minibuffer when active
    (add-hook 'minibuffer-setup-hook 'doom-brighten-minibuffer)
    :config
    (load-theme 'doom-one t))
#+END_SRC

** sexy-monochrome

#+BEGIN_SRC emacs-lisp
  (use-package sexy-monochrome-theme
    :disabled t
    :config (load-theme 'sexy-monochrome t))
#+END_SRC
